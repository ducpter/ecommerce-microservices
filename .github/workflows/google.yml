name: Deploy to GKE with Public Images

on:
  push:
    branches:
      - main # Trigger on push to the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Google Cloud SDK
      - name: Install the gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          install_components: "gke-gcloud-auth-plugin"
          export_default_credentials: true

      # Connect to GKE Cluster
      - name: Connect to GKE Cluster
        run: |
          gcloud container clusters get-credentials ecommerce-cluster --region asia-southeast1

      # Authenticate Docker with Google Cloud
      - name: Authenticate Docker
        run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev

      # Build and push the Docker images for all services
      - name: Build and Push Docker Images
        env:
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        run: |
          # Build images for each service
          docker build --no-cache --build-arg=SERVICE_NAME=api-gateway --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/api-gateway:latest .
          docker build --no-cache --build-arg=SERVICE_NAME=discovery-server --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/discovery-server:latest .
          docker build --no-cache --build-arg=SERVICE_NAME=product-service --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/product-service:latest .
          docker build --no-cache --build-arg=SERVICE_NAME=order-service --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/order-service:latest .
          docker build --no-cache --build-arg=SERVICE_NAME=inventory-service --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/inventory-service:latest .
          docker build --no-cache --build-arg=SERVICE_NAME=notification-service --tag=asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/notification-service:latest .

          # Push images to Google Container Registry
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/api-gateway:latest
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/discovery-server:latest
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/product-service:latest
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/order-service:latest
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/inventory-service:latest
          docker push asia-southeast1-docker.pkg.dev/${{ secrets.GOOGLE_PROJECT }}/demo/notification-service:latest

      # Cleanup Existing Resources
      - name: Cleanup Kubernetes Resources
        run: |
          helm uninstall api-gateway -n default || true
          helm uninstall discovery-server -n default || true
          helm uninstall product-service -n default || true
          helm uninstall order-service -n default || true
          helm uninstall inventory-service -n default || true
          helm uninstall notification-service -n default || true
          kubectl delete pod --all --grace-period=0 --force -n default || true
          kubectl delete pvc --all --grace-period=0 --force -n default || true
          kubectl delete configmap --all --grace-period=0 --force -n default || true
          kubectl delete secret --all --grace-period=0 --force -n default || true

      # Deploy all services using kubectl apply
      - name: Deploy API Gateway to GKE
        run: |
          kubectl apply -f k8s/k8s-api-gateway.yaml
          kubectl rollout status deployment/api-gateway --timeout=300s

      - name: Deploy Discovery Server to GKE
        run: |
          kubectl apply -f k8s/k8s-discovery-server.yaml
          kubectl rollout status deployment/discovery-server --timeout=300s

      - name: Deploy Product Service to GKE
        run: |
          kubectl apply -f k8s/k8s-product-service.yaml
          kubectl rollout status deployment/product-service --timeout=300s

      - name: Deploy Order Service to GKE
        run: |
          kubectl apply -f k8s/k8s-order-service.yaml
          kubectl rollout status deployment/order-service --timeout=300s

      - name: Deploy Inventory Service to GKE
        run: |
          kubectl apply -f k8s/k8s-inventory-service.yaml
          kubectl rollout status deployment/inventory-service --timeout=300s

      - name: Deploy Notification Service to GKE
        run: |
          kubectl apply -f k8s/k8s-notification-service.yaml
          kubectl rollout status deployment/notification-service --timeout=300s
