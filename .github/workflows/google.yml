name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'silicon-airlock-456802-p4'
  GAR_LOCATION: 'asia-southeast1'
  GKE_CLUSTER: 'ecommerce'
  GKE_ZONE: 'asia-southeast1'
  DEPLOYMENT_NAME: 'gke-test'
  REPOSITORY: 'samples'
  IMAGE: 'static-site'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      # 2. Authenticate with GCP using Service Account key
      - name: 'Authenticate to GCP with Service Account'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true  # <<< This is critical

      # 3. Get GKE cluster credentials (sets up kubeconfig)
      - name: 'Get GKE credentials'
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --region ${{ env.GKE_ZONE }}

      # 4. Build and push Docker image to Artifact Registry
      - name: 'Build and push Docker image'
        run: |
          IMAGE_URI="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
          echo "IMAGE_URI: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          GAR_LOCATION: ${{ env.GAR_LOCATION }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE: ${{ env.IMAGE }}

      # 5. Deploy to GKE using kubectl
      - name: 'Deploy to GKE'
        run: |
          IMAGE_URI="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
          echo "Updating deployment.yaml with image: $IMAGE_URI"
          sed -i "s|image: .*|image: $IMAGE_URI|g" k8s/deployment.yaml
          kubectl apply -f k8s/
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
